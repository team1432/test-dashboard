{"version":3,"sources":["app/ui.coffee"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["$ = (selector) ->\n  list = document.querySelectorAll(selector)\n  if list.length is 1\n    list[0]\n  else\n    list\n\nonRobotConnection = (connected) ->\n  state = if connected then 'Connected' else 'Disconnected'\n  console.log state\n  if connected\n    document.body.classList.add 'connected'\n    document.body.classList.remove 'disconnected'\n    refreshCamera()\n  else\n    document.body.classList.add 'disconnected'\n    document.body.classList.remove 'connected'\n  return\n\nonValueChanged = (key, value, isNew) ->\n  # Sometimes, NetworkTables will pass booleans as strings. This corrects for that.\n  if value is 'true'\n    value = true\n  else if value is 'false'\n    value = false\n  # This switch statement chooses which UI element to update when a NetworkTables variable changes\n  switch key\n    when '/SmartDashboard/lowerMotorSpeed'\n      if value > 100\n        value = 100\n      else if value < 0\n        value = 0\n      ui.lowerMotorSpeed.value = value\n    when '/SmartDashboard/upperMotorSpeed'\n      if value > 100\n        value = 100\n      else if value < 0\n        value = 0\n      ui.upperMotorSpeed.value = value\n    when '/SmartDashboard/timeRunning'\n      # When this NetworkTables variable is true, the timer will start.\n      # You shouldn't need to touch this code, but it's documented anyway in case you do.\n      s = 135\n      if value\n        # Make sure timer is reset to black when it starts\n        ui.timer.style.color = 'black'\n        # Function below adjusts time left every second\n        countdown = setInterval((->\n          s--\n          # Subtract one second\n          # Minutes (m) is equal to the total seconds divided by sixty with the decimal removed.\n          m = Math.floor(s / 60)\n          # Create seconds number that will actually be displayed after minutes are subtracted\n          visualS = s % 60\n          # Add leading zero if seconds is one digit long, for proper time formatting.\n          visualS = if visualS < 10 then '0' + visualS else visualS\n          if s < 0\n            # Stop countdown when timer reaches zero\n            clearTimeout countdown\n            return\n          else if s <= 15\n            # Flash timer if less than 15 seconds left\n            ui.timer.style.color = if s % 2 is 0 then '#FF3030' else 'transparent'\n          else if s <= 30\n            # Solid red timer when less than 30 seconds left.\n            ui.timer.style.color = '#FF3030'\n          ui.timer.innerHTML = m + ':' + visualS\n          return\n        ), 1000)\n      else\n        s = 135\n      NetworkTables.setValue key, false\n\n  # The following code manages tuning section of the interface.\n  # This section displays a list of all NetworkTables variables (that start with /SmartDashboard/) and allows you to directly manipulate them.\n  propName = key.substring(16, key.length)\n  # Check if value is new and doesn't have a spot on the list yet\n  if isNew and !document.getElementsByName(propName)[0]\n    # Make sure name starts with /SmartDashboard/. Properties that don't are technical and don't need to be shown on the list.\n    if key.substring(0, 16) is '/SmartDashboard/'\n      # Make a new div for this value\n      div = document.createElement('div')\n      # Make div\n      ui.tuning.list.appendChild div\n      # Add the div to the page\n      p = document.createElement('p')\n      # Make a <p> to display the name of the property\n      p.innerHTML = propName\n      # Make content of <p> have the name of the NetworkTables value\n      div.appendChild p\n      # Put <p> in div\n      input = document.createElement('input')\n      # Create input\n      input.name = propName\n      # Make its name property be the name of the NetworkTables value\n      input.value = value\n      # Set\n      # The following statement figures out which data type the variable is.\n      # If it's a boolean, it will make the input be a checkbox. If it's a number,\n      # it will make it a number chooser with up and down arrows in the box. Otherwise, it will make it a textbox.\n      if value is true or value is false\n        # Is it a boolean value?\n        input.type = 'checkbox'\n        input.checked = value\n        # value property doesn't work on checkboxes, we'll need to use the checked property instead\n      else if !isNaN(value)\n        # Is the value not not a number? Great!\n        input.type = 'number'\n      else\n        # Just use a text if there's no better manipulation method\n        input.type = 'text'\n      # Create listener for value of input being modified\n\n      input.onchange = ->\n        switch input.type\n          # Figure out how to pass data based on data type\n          when 'checkbox'\n            # For booleans, send bool of whether or not checkbox is checked\n            NetworkTables.setValue key, input.checked\n          when 'number'\n            # For number values, send value of input as an int.\n            NetworkTables.setValue key, parseInt(input.value)\n          when 'text'\n            # For normal text values, just send the value.\n            NetworkTables.setValue key, input.value\n        return\n\n      # Put the input into the div.\n      div.appendChild input\n  else\n    # If the value is not new\n    # Find already-existing input for changing this variable\n    oldInput = document.getElementsByName(propName)[0]\n    if oldInput\n      # If there is one (there should be, unless something is wrong)\n      if oldInput.type is 'checkbox'\n        # Figure out what data type it is and update it in the list\n        oldInput.checked = value\n      else\n        oldInput.value = value\n    else\n      console.log 'Error: Non-new variable ' + key + ' not present in tuning list!'\n  return\n\nfor element in $('button, .select-container, select')\n  element.addEventListener 'click', ->\n    @blur()\n\n# Define UI elements\nui = \n  timer: $('#timer')\n  robotState: $('#robot-state')\n  camera: $('#camera')\n  cameraRefresh: $('#camera-refresh')\n  cameraImage: $('#camera img')\n  tuning:\n    list: $('#tuning')\n    button: $('#tuning-button')\n    name: $('#name')\n    value: $('#value')\n    set: $('#set')\n    get: $('#get')\n  autoSelect: $('#auto-select')\n  armPosition: $('#arm-position')\n  lowerMotorSpeed: $('#lower-speed')\n  upperMotorSpeed: $('#upper-speed')\n# Sets function to be called on NetworkTables connect. Commented out because it's usually not necessary.\n# NetworkTables.addWsConnectionListener(onNetworkTablesConnection, true);\n# Sets function to be called when robot dis/connects\nNetworkTables.addRobotConnectionListener onRobotConnection, true\n# Sets function to be called when any NetworkTables key/value changes\nNetworkTables.addGlobalListener onValueChanged, true\n# Open tuning section when button is clicked\n\nui.tuning.button.onclick = ->\n  if ui.tuning.list.classList.contains 'hidden'\n    ui.tuning.list.classList.remove 'hidden'\n  else\n    ui.tuning.list.classList.add 'hidden'\n\n# Manages get and set buttons at the top of the tuning pane\n\nui.tuning.set.onclick = ->\n  # Make sure the inputs have content, if they do update the NT value\n  if ui.tuning.name.value and ui.tuning.value.value\n    NetworkTables.setValue '/SmartDashboard/' + ui.tuning.name.value, ui.tuning.value.value\n  return\n\nui.tuning.get.onclick = ->\n  ui.tuning.value.value = NetworkTables.getValue(ui.tuning.name.value)\n  return\n\ncameraSrc = ui.cameraImage.getAttribute('src')\n\nrefreshCamera = ->\n  ui.cameraImage.setAttribute('src', cameraSrc + new Date().valueOf())\n\nui.cameraRefresh.onclick = ->\n  refreshCamera()\n\nui.cameraImage.onerror = ->\n  @src = 'images/frc-field.png'\n# Get value of speed slider when it's adjusted\n\nui.lowerMotorSpeed.onchange = ->\n  NetworkTables.setValue '/SmartDashboard/lowerMotorSpeed', parseInt(@value)\n  return\n\n# Get value of speed slider when it's adjusted\n\nui.upperMotorSpeed.onchange = ->\n  NetworkTables.setValue '/SmartDashboard/upperMotorSpeed', parseInt(@value)\n  return\n\n"]}